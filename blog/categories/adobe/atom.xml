<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: adobe | everything is code]]></title>
  <link href="http://everythingiscode.github.io/blog/categories/adobe/atom.xml" rel="self"/>
  <link href="http://everythingiscode.github.io/"/>
  <updated>2014-07-03T20:48:34+01:00</updated>
  <id>http://everythingiscode.github.io/</id>
  <author>
    <name><![CDATA[Nohacks Allowed]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Content section ending with toolbar in Adobe Adobe Experience Manager]]></title>
    <link href="http://everythingiscode.github.io/blog/2014/07/02/content-section-ending-with-toolbar-in-adobe-aem/"/>
    <updated>2014-07-02T09:24:18+01:00</updated>
    <id>http://everythingiscode.github.io/blog/2014/07/02/content-section-ending-with-toolbar-in-adobe-aem</id>
    <content type="html"><![CDATA[<h1>Purpose</h1>

<p>Sometimes we have to implement a component that offers a parsys for other components to be pulled from the sidekick. At times the contents of the page can be very rich and it is difficut to distinguish where does our container component exactly start and finish. To save ourselves from guessing as the page grows, let us show clear bounds of the component. For that purpose we will use facilities provided by _cq_editConfig.xml as well as develop generic endbar component.</p>

<h2>Our goal</h2>

<p>Our task is to show Toobars at the beginning and and end of the container component which resemble following structure:
<img src="/images/blog/2013/07/02/start.png" alt="Start bar" />
<img src="/images/blog/2013/07/02/end.png" alt="End bar" /></p>

<h1>Start bar</h1>

<h2>Enable edit bar on the parent component</h2>

<p>To show the start bar, enable following settings in component&rsquo;s _cq_editConfig.xml</p>

<pre><code>cq:layout="editbar"
cq:actions="[text:Start of Container,-,insert,copymove,delete]"&gt;
</code></pre>

<p>It enables editbar layout and sets its text to &lsquo;Start of the Container&rsquo;.</p>

<h1>End bar</h1>

<h2>Set the title of the parent component</h2>

<p>Contents of the jcr:title will be included in the endbar caption, so make sure it&rsquo;s set to the desired value</p>

<pre><code>jcr:title="Container"
</code></pre>

<h2>Change the layout of the parent component</h2>

<p>To indicate the start of the container, change the layout of the component you are building to:</p>

<pre><code>cq:layout="editbar"
</code></pre>

<h2>Content section ending toolbar code</h2>

<p>Create endbar component and use following jsp to render component&rsquo;s body</p>

<pre><code>&lt;%@page pageEncoding="UTF-8" contentType="text/html; charset=UTF-8"%&gt;
&lt;%@ include file="/libs/foundation/global.jsp"%&gt;
&lt;%@ page session="false" import="com.day.cq.wcm.api.components.EditContext,
    com.day.cq.wcm.api.components.Toolbar,
    com.day.cq.wcm.api.components.Component" %&gt;

&lt;c:set var="parentLookup" value="${sling:getResource(resourceResolver, resource.parent.resourceType)}" /&gt;
&lt;sling:adaptTo adaptable="${parentLookup}" adaptTo="com.day.cq.wcm.api.components.Component" var="parentComponent" /&gt;

&lt;%
Component parentComponent = (Component)pageContext.getAttribute("parentComponent");
editContext.getEditConfig().getToolbar().set(0, new Toolbar.Label("End of " + parentComponent.getTitle()));
%&gt;
</code></pre>

<h2>Include endbar.jsp in the parent component</h2>

<p>Right on the bottom of the jsp for the component you are building</p>

<pre><code>&lt;cq:include path="container-end" resourceType="endbar" /&gt;
</code></pre>

<h1>End result</h1>

<p>If you got everything right your component should be looking similarly to:</p>

<p><img src="/images/blog/2013/07/02/container.png" alt="Container" /></p>
]]></content>
  </entry>
  
</feed>
